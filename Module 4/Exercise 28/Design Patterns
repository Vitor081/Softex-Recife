Aluno: João Vitor Regis Lima
Formação: Back end

Padrões de Comportamento: Padrões que caracterizam formas de interação entre classes e objetos...

1º Exemplo: MEDIATOR
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conceito: 

Define um objeto que encapsule a forma com a qual um conjunto de objetos interagem. 
O padrão Mediator promove o acoplamento fraco evitando que objetos referenciem uns aos outros explicitamente e permite que suas interações variem independentemente.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Proposito:

O Mediator é um padrão de projeto comportamental que permite que você reduza as dependências caóticas entre objetos.
O padrão restringe comunicações diretas entre objetos e os força a colaborar apenas através do objeto mediador.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Exemplificação pratica de problema:

Digamos que você tem uma caixa de diálogo para criar e editar perfis de clientes. 
Ela consiste em vários controles de formulário tais como campos de texto, caixas de seleção, botões, etc.
Alguns dos elementos do formulário podem interagir com outros. Por exemplo, selecionando a caixa de “Eu tenho um cão” pode revelar uma caixa de texto escondida para inserir o nome do cão. Outro exemplo é o botão enviar que tem que validar todos os campos antes de salvar os dados.
Elementos da UI são interdependentes
Os elementos podem ter várias relações com outros elementos.
Portanto, mudanças a alguns elementos podem afetar os outros.
Ao ter essa lógica implementada diretamente dentro do código dos elementos de formulários você torna as classes dos elementos muito difíceis de se reutilizar em outros formulários da aplicação.
Por exemplo, você não será capaz de usar aquela classe de caixa de seleção dentro de outro formulário porque ela está acoplado com o campo de texto do nome do cão. Você pode ter ou todas as classes envolvidas na renderização do formulário de perfil, ou nenhuma.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Exemplificação pratica de solução:

O padrão Mediator sugere que você deveria cessar toda comunicação direta entre componentes que você quer tornar independentes um do outro.
Ao invés disso, esses componentes devem colaborar indiretamente, chamando um objeto mediador especial que redireciona as chamadas para os componentes apropriados.
Como resultado, os componentes dependem apenas de uma única classe mediadora ao invés de serem acoplados a dúzias de outros colegas.
No nosso exemplo com o formulário de edição de perfil, a classe diálogo em si pode agir como mediadora. 
O mais provável é que a classe diálogo já esteja ciente de todos seus sub-elementos, então você não precisa introduzir novas dependências nessa classe.
A mudança mais significativa acontece com os próprios elementos do formulário. 
Vamos considerar o botão de enviar. Antes, cada vez que um usuário clicava no botão, ele teria que validar os valores de todos os elementos de formulário.
Agora seu único trabalho é notificar a caixa de diálogo sobre o clique. 
Ao receber essa notificação, a própria caixa de diálogo realiza as validações ou passa a tarefa para os elementos individuais. 
Portanto, ao invés de estar amarrado a uma dúzia de elementos de formulário, o botão está dependente apenas da classe diálogo.
Você pode ir além e fazer a dependência ainda mais frouxa extraindo a interface comum de todos os tipos de caixas de diálogo.
A interface deve declarar o método de notificação que todos os elementos do formulário podem usar para notificar a caixa de diálogo sobre eventos acontecendo a aqueles elementos. 
Portanto, nosso botão enviar deve agora ser capaz de trabalhar com qualquer caixa de diálogo que implemente aquela interface.

Dessa forma, o padrão Mediator permite que você encapsule uma complexa rede de relações entre vários objetos em apenas um objeto mediador.
Quanto menos dependências uma classe tenha, mais fácil essa classe se torna para se modificar, estender, ou reutilizar.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Pros e contras: 

- Princípio de responsabilidade única. Você pode extrair as comunicações entre vários componentes para um único lugar, tornando as de mais fácil entendimento e manutenção.
- Princípio aberto/fechado. Você pode introduzir novos mediadores sem ter que mudar os próprios componentes.
- Você pode reduzir o acoplamento entre os vários componentes de um programa.
- Você pode reutilizar componentes individuais mais facilmente.
 
 
- Com o tempo um mediador pode evoluir para um OBJETO DEUS.
